<?php
/**
 * Custom CSS and JS PRO
 *
 */

if ( ! defined( 'ABSPATH' ) ) {
    exit; // Exit if accessed directly
}


/**
 * Get options for a specific custom-css-js post
 */
if ( ! function_exists( 'ccj_get_options' ) ) {
function ccj_get_options( $post_id = 0, $language = 'css' ) {

    $default_options = array(
        'type'  => 'header',
        'linking'   => 'internal',
        'side'      => 'frontend',
        'language'  => 'css',
        'preprocessor' => 'none',
        'minify' => false,
        'priority' => 5,
    );

    if ( $language == 'html' ) {
        $default_options = array(
            'type'   => 'header',
            'linking'      => 'both',
            'side'      => 'frontend',
            'language' => 'html',
            'priority'  => 5,
        );
    }

    if ( empty( $post_id ) || $post_id == 0 ) {
        return $default_options;
    }

    $options = get_post_meta( $post_id );
    if ( empty( $options ) || ! isset ( $options['options'][0] ) ) {
        return $default_options;
    }

    $options = unserialize( $options['options'][0] );

    foreach( $default_options as $_key => $_value ) {
        if ( ! isset($options[$_key] ) ) {
            $options[$_key] = $_value;
        }
    }

    return $options;
}
}


/**
 * Save the code into a file in CCJ_UPLOAD_DIR
 *
 * @var content string - the code to be saved
 * @var options array - the code options as returned by ccj_get_options
 * @var filename string - the filename of the code
 */
if ( ! function_exists( 'ccj_save_code_file' ) ) {
function ccj_save_code_file( $content, $options, $filename = '' ) {

    $content = stripslashes( $content );

    if ( $options['preprocessor'] != 'none' ) {
        $content = ccj_modify_code('preprocess', $options['preprocessor'], $content );
    }
    if ( $options['minify'] == '1' ) {
        $content = ccj_modify_code('minify', $options['language'], $content );
    }


    $before = ''; $after = '';
    if ( $options['linking'] == 'internal' ) {
        $before = '<!-- start Simple Custom CSS and JS -->' . PHP_EOL; 
        $after = '<!-- end Simple Custom CSS and JS -->' . PHP_EOL;
        if ( $options['language'] == 'css' ) {
            $before .= '<style type="text/css">' . PHP_EOL;
            $after = PHP_EOL . '</style>' . PHP_EOL . $after;
        }
        if ( $options['language'] == 'js' ) {
            if ( ! preg_match( '/<script\b[^>]*>([\s\S]*?)<\/script>/im', $content ) ) {
            $before .= '<script type="text/javascript">' . PHP_EOL;
            $after = PHP_EOL . '</script>' . PHP_EOL . $after;
            }
        }
    }

    if ( $options['linking'] == 'external' ) {
        $before = '/******* Do not edit this file *******' . PHP_EOL .
        'Simple Custom CSS and JS - by Silkypress.com' . PHP_EOL . 
        'Saved: '.date('M d Y | H:i:s').' */' . PHP_EOL;
    }

    if ( wp_is_writable( CCJ_UPLOAD_DIR ) ) {
        $file_content = $before . $content . $after;
        @file_put_contents( CCJ_UPLOAD_DIR. '/' . $filename , $file_content );
    }
}
}

/**
 * Modify the code
 *
 * @var type string - allowed options: minify, preprocess
 * @var option string - allowed options: css, js, less, sass
 * @var content string - the code to modify
 */
if ( ! function_exists( 'ccj_modify_code' ) ) {
function ccj_modify_code($type = 'minify', $option = 'ccs', $content ) {

    if ( $type == 'minify' ) {
        // Minify the CSS
        if ( $option == 'css' ) {
            require_once( 'vendor/CSSmin.php' ); 
            $obj = new CSSmin();
            try {
                $content = $obj->run( $content );
            } catch( Exception $e ) {
                /* TODO: Put the exceptions in WP logs */
            }
        }

        // Minify the JS
        if ( $option == 'js' ) {
            require_once( 'vendor/Minifier.php' );
            try {
                $content = Minifier::minify( $content );
            } catch( Exception $e ) {
                /* TODO: Put the exceptions in WP logs */
            }
        }

    }

    if ( $type == 'preprocess' ) {
        if ( $option == 'less' ) {
            require_once( 'vendor/lessc.inc.php' );
            $compiler = new lessc();
        }

        if ( $option == 'sass' ) {
            require_once( 'vendor/scss.inc.php' );
            $compiler = new scssc();
        }

        if ( isset( $compiler ) ) {
            try {
                return $compiler->compile( $content );
            } catch( Exception $e ) {
                return $content;
            }
        }
    }

    return $content;
    
}
}



/**
 * Build a tree where you can quickly find the needed custom-css-js posts 
 *
 * @return void
 */
if ( ! function_exists( 'ccj_build_search_tree' ) ) {
function ccj_build_search_tree() {

    // Retrieve all the custom-css-js codes 
    $posts = query_posts( 'post_type=custom-css-js&post_status=publish&nopaging=true' );

    $tree = array();
    foreach ( $posts as $_post ) {
        if ( ! ccj_is_active( $_post->ID ) ) {
            continue;
        }

        $options = ccj_get_options( $_post->ID );
        
        // Get the branch name, example: frontend-css-header-external
        $tree_branch = $options['side'] . '-' .$options['language'] . '-' . $options['type'] . '-' . $options['linking'];

        $filename = $_post->ID . '.' . $options['language'];

        if ( $options['linking'] == 'external' ) {
            $filename .= '?v=' . rand(1, 10000); 
        }

        if ( $options['language'] == 'html' ) {
            if ( $options['type'] == 'shortcode' ) {
                $tree_branch = 'shortcode';
                $options['priority'] = 10;           
                $filename = $_post->ID . '-' . $options['name'];
            } else {
                $tree_branch = $options['side'] . '-html-' . $options['type'] . '-' .$options['linking'];
                $filename = $_post->ID;
            }
        }

        $priority = isset( $options['priority'] ) ? $options['priority'] : 5;

        // Add the code file to the tree branch
        $tree[$priority][ $tree_branch ][] = $filename; 

    }

    // Save the tree in the database
    update_option( 'custom-css-js-tree', $tree );
}
}


/**
 * Build a tree where you can quickly find the needed custom-css-js posts 
 *
 * @return void
 */
/*
if ( ! function_exists( 'ccj_build_html_tree' ) ) {
function ccj_build_html_tree() {

    // Retrieve all the custom-css-js codes 
    $posts = query_posts( 'post_type=custom-css-js&post_status=publish&nopaging=true' );

    $tree = array();
    foreach ( $posts as $_post ) {
        if ( ! ccj_is_active( $_post->ID ) ) {
            continue;
        }

        $options = ccj_get_options( $_post->ID, 'html' );

        if ( $options['language'] != 'html' ) {
            continue;
        }
        
        // Get the branch name, example: frontend-css-header-external
        $tree_branch = $options['side'] . '-' . $options['linking'];


        $priority = isset( $options['priority'] ) ? $options['priority'] : 5;

        // Add the code file to the tree branch
        $tree[$priority][ $tree_branch ][] = $_post->ID; 

    }

    // Save the tree in the database
    update_option( 'custom-css-js-html-tree', $tree );
}
}
*/

/**
 * Check if a code is active
 *
 * @return bool
 */
if ( ! function_exists( 'ccj_is_active' ) ) {
function ccj_is_active( $post_id ) {
    return get_post_meta( $post_id, '_active', true ) !== 'no';
}
}


/**
 * Get an array with all the information for building the code's options
 */
if ( ! function_exists( 'ccj_get_options_meta' ) ) {
function ccj_get_options_meta() {
    $options = array(
        'linking' => array(
            'title' => __('Linking type', 'custom-css-js-pro'),
            'type' => 'radio',
            'default' => 'internal',
            'values' => array(
                'external' => array(
                    'title' => __('External File', 'custom-css-js-pro'),
                    'dashicon' => 'media-code',
                ),
                'internal' => array(
                    'title' => __('Internal', 'custom-css-js-pro'),
                    'dashicon' => 'editor-alignleft',
                ),
            ),
        ),
        'type' => array(
            'title' => __('Where on page', 'custom-css-js-pro'),
            'type' => 'radio',
            'default' => 'header',
            'values' => array(
                'header' => array(
                    'title' => __('Header', 'custom-css-js-pro'),
                    'dashicon' => 'arrow-up-alt2',
                ),
                'footer' => array(
                    'title' => __('Footer', 'custom-css-js-pro'),
                    'dashicon' => 'arrow-down-alt2',
                ),
            ),
        ),
        'side' => array(
            'title' => __('Where in site', 'custom-css-js-pro'),
            'type' => 'radio',
            'default' => 'frontend',
            'values' => array(
                'frontend' => array(
                    'title' => __('In Frontend', 'custom-css-js-pro'),
                    'dashicon' => 'tagcloud',
                ),
                'admin' => array(
                    'title' => __('In Admin', 'custom-css-js-pro'),
                    'dashicon' => 'id',
                ),
                'login' => array(
                    'title' => __('On Login Page', 'custom-css-js-pro'),
                    'dashicon' => 'admin-network',
                ),
            ),
        ),
        'preprocessor' => array(
            'title' => __('CSS Preprocessor', 'custom-css-js-pro'),
            'type' => 'radio',
            'default' => 'none',
            'values' => array(
                'none' => array(
                    'title' => __('None', 'custom-css-js-pro'),
                ),
                'less' => array(
                    'title' => 'Less',
                ),
                'sass' => array(
                    'title' => __('SASS (only SCSS syntax)', 'custom-css-js-pro'),
                ),
            ),
        ),
        'minify' => array(
            'title' => __('Minify the code', 'custom-css-js-pro'),
            'type' => 'checkbox',
            'default' => false,
            'dashicon' => 'editor-contract',
        ),
        'priority' => array(
            'title' => __('Priority', 'custom-css-js-pro'),
            'type' => 'select',
            'default' => 5,
            'dashicon' => 'sort',
            'values' => array(
                1 => __('1 (highest)', 'custom-css-js-pro'),
                2 => '2',
                3 => '3',
                4 => '4',
                5 => '5',
                6 => '6',
                7 => '7',
                8 => '8',
                9 => '9',
                10 => __('10 (lowest)', 'custom-css-js-pro'),
            ),
        ),
    );

    return $options;
}
}


/**
 * Get an array with all the information for building the code's options
 */
if ( ! function_exists( 'ccj_get_options_meta_html' ) ) {
function ccj_get_options_meta_html() {
    $options = array(
        'type' => array(
            'title' => __('Where on page', 'custom-css-js-pro'),
            'type' => 'radio',
            'default' => 'header',
            'values' => array(
                'header' => array(
                    'title' => __('Header', 'custom-css-js-pro'),
                    'dashicon' => 'arrow-up-alt2',
                ),
                'footer' => array(
                    'title' => __('Footer', 'custom-css-js-pro'),
                    'dashicon' => 'arrow-down-alt2',
                ),
                'shortcode' => array(
                    'title' => __('As shortcode', 'custom-css-js-pro'),
                    'dashicon' => 'paperclip',
                ),
            ),
        ),
        'side' => array(
            'title' => __('Where in site', 'custom-css-js-pro'),
            'type' => 'radio',
            'default' => 'frontend',
            'values' => array(
                'frontend' => array(
                    'title' => __('In Frontend', 'custom-css-js-pro'),
                    'dashicon' => 'tagcloud',
                ),
                'admin' => array(
                    'title' => __('In Admin', 'custom-css-js-pro'),
                    'dashicon' => 'id',
                ),
            ),
        ),
        'linking' => array(
            'title' => __('On which device', 'custom-css-js-pro'),
            'type' => 'radio',
            'default' => 'both',
            'dashicon' => '',
            'values' => array(
                'desktop' => array(
                    'title' => __('Desktop', 'custom-css-js-pro'),
                    'dashicon' => 'desktop',
                ),
                'mobile' => array(
                    'title' => __('Mobile', 'custom-css-js-pro'),
                    'dashicon' => 'smartphone',
                ),
                'both' => array(
                    'title' => __('Both', 'custom-css-js-pro'),
                    'dashicon' => 'tablet',
                ),
            ),
        ),
        'priority' => array(
            'title' => __('Priority', 'custom-css-js-pro'),
            'type' => 'select',
            'default' => 5,
            'dashicon' => 'sort',
            'values' => array(
                1 => __('1 (highest)', 'custom-css-js-pro'),
                2 => '2',
                3 => '3',
                4 => '4',
                5 => '5',
                6 => '6',
                7 => '7',
                8 => '8',
                9 => '9',
                10 => __('10 (lowest)', 'custom-css-js-pro'),
            ),
        ),
    );

    return $options;
}
}


/**
 * Make a link to the documentation 
 */
if ( ! function_exists( 'ccj_a_doc' ) ) {
function ccj_a_doc( $link ) {
    
    $output = '<a href="'. $link .'" target="_blank" class="dashicons"><span class="dashicons dashicons-editor-help" rel="tipsy" original-title="'.__('Click for the documentation', 'custom-css-js-pro').'"></span></a>';

    return $output;
}
}

